// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Restolog.DataAccess;

#nullable disable

namespace Restolog.DataAccess.Migrations
{
    [DbContext(typeof(RestologContext))]
    [Migration("20250526080631_LoggerAdded")]
    partial class LoggerAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Restolog.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "İçecekler"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Yemekler"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tatlılar"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Çorbalar"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Salatalar"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sandviçler"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Makarnalar"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Kahvaltılıklar"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Pizza"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Sıcak İçecekler"
                        });
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("TableId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            CreatedAt = new DateTime(2025, 5, 24, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = false,
                            OrderStatusId = 2,
                            TableId = new Guid("55555555-5555-5555-5555-555555555555"),
                            TotalPrice = 100m,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            CreatedAt = new DateTime(2025, 5, 22, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            OrderStatusId = 1001,
                            TableId = new Guid("66666666-6666-6666-6666-666666666666"),
                            TotalPrice = 40m,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            CreatedAt = new DateTime(2025, 5, 9, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = false,
                            OrderStatusId = 3,
                            TableId = new Guid("44444444-4444-4444-4444-444444444444"),
                            TotalPrice = 120m,
                            UserId = new Guid("33333333-3333-3333-3333-333333333333")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            CreatedAt = new DateTime(2025, 2, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            OrderStatusId = 1001,
                            TableId = new Guid("77777777-7777-7777-7777-777777777777"),
                            TotalPrice = 180m,
                            UserId = new Guid("11111111-1111-1111-1111-111111111111")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            CreatedAt = new DateTime(2024, 11, 10, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            IsPaid = true,
                            OrderStatusId = 1001,
                            TableId = new Guid("44444444-4444-4444-4444-444444444444"),
                            TotalPrice = 210m,
                            UserId = new Guid("22222222-2222-2222-2222-222222222222")
                        });
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemNo")
                        .HasColumnType("int");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemNo = 1,
                            OrderId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ProductId = 1,
                            Quantity = 2m,
                            Subtotal = 50m,
                            UnitPrice = 25m
                        },
                        new
                        {
                            Id = 2,
                            ItemNo = 2,
                            OrderId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ProductId = 4,
                            Quantity = 1m,
                            Subtotal = 30m,
                            UnitPrice = 30m
                        },
                        new
                        {
                            Id = 3,
                            ItemNo = 3,
                            OrderId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ProductId = 2,
                            Quantity = 1m,
                            Subtotal = 15m,
                            UnitPrice = 15m
                        },
                        new
                        {
                            Id = 4,
                            ItemNo = 1,
                            OrderId = new Guid("99999999-9999-9999-9999-999999999999"),
                            ProductId = 5,
                            Quantity = 1m,
                            Subtotal = 40m,
                            UnitPrice = 40m
                        },
                        new
                        {
                            Id = 5,
                            ItemNo = 1,
                            OrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ProductId = 13,
                            Quantity = 2m,
                            Subtotal = 110m,
                            UnitPrice = 55m
                        },
                        new
                        {
                            Id = 6,
                            ItemNo = 2,
                            OrderId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            ProductId = 9,
                            Quantity = 1m,
                            Subtotal = 32m,
                            UnitPrice = 32m
                        },
                        new
                        {
                            Id = 7,
                            ItemNo = 1,
                            OrderId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ProductId = 15,
                            Quantity = 1m,
                            Subtotal = 120m,
                            UnitPrice = 120m
                        },
                        new
                        {
                            Id = 8,
                            ItemNo = 2,
                            OrderId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            ProductId = 6,
                            Quantity = 2m,
                            Subtotal = 70m,
                            UnitPrice = 35m
                        },
                        new
                        {
                            Id = 9,
                            ItemNo = 1,
                            OrderId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ProductId = 17,
                            Quantity = 2m,
                            Subtotal = 160m,
                            UnitPrice = 80m
                        },
                        new
                        {
                            Id = 10,
                            ItemNo = 2,
                            OrderId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            ProductId = 19,
                            Quantity = 5m,
                            Subtotal = 50m,
                            UnitPrice = 10m
                        });
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Yeni"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Hazırlanıyor"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Serviste"
                        },
                        new
                        {
                            Id = 1001,
                            StatusName = "Ödendi"
                        },
                        new
                        {
                            Id = 1002,
                            StatusName = "İptal"
                        });
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.PaymentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderDetailId")
                        .HasColumnType("int");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderDetailId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Soğuk gazlı içecek",
                            Name = "Kola",
                            Price = 25m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Serinletici içecek",
                            Name = "Ayran",
                            Price = 15m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            Description = "Etli burger",
                            Name = "Hamburger",
                            Price = 70m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Kızarmış patates",
                            Name = "Patates Kızartması",
                            Price = 30m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Tatlı",
                            Name = "Baklava",
                            Price = 40m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "Fırın sütlaç",
                            Name = "Sütlaç",
                            Price = 35m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            Description = "Sıcak çorba",
                            Name = "Mercimek Çorbası",
                            Price = 28m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Description = "Baharatlı çorba",
                            Name = "Ezogelin Çorbası",
                            Price = 30m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            Description = "Taze salata",
                            Name = "Çoban Salata",
                            Price = 32m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Description = "Mevsim yeşillikleri",
                            Name = "Mevsim Salata",
                            Price = 34m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 6,
                            Description = "Izgara tavuklu sandviç",
                            Name = "Tavuklu Sandviç",
                            Price = 45m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 6,
                            Description = "Ton balıklı sandviç",
                            Name = "Ton Balıklı Sandviç",
                            Price = 48m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 7,
                            Description = "Kıymalı makarna",
                            Name = "Spagetti Bolonez",
                            Price = 55m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 7,
                            Description = "Kremalı makarna",
                            Name = "Fettucine Alfredo",
                            Price = 60m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 8,
                            Description = "Zengin kahvaltı tabağı",
                            Name = "Serpme Kahvaltı",
                            Price = 120m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 8,
                            Description = "Yumurtalı menemen",
                            Name = "Menemen",
                            Price = 38m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 9,
                            Description = "Klasik pizza",
                            Name = "Margherita Pizza",
                            Price = 80m
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 9,
                            Description = "Sucuklu pizza",
                            Name = "Sucuklu Pizza",
                            Price = 90m
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 10,
                            Description = "Sıcak çay",
                            Name = "Çay",
                            Price = 10m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 10,
                            Description = "Filtre kahve",
                            Name = "Kahve",
                            Price = 22m
                        });
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.TableEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReserved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastOrderTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("OrderDuration")
                        .HasColumnType("time");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = false,
                            IsReserved = false,
                            Name = "Masa 1",
                            Status = "Boş",
                            TableNumber = 1
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = true,
                            IsReserved = false,
                            Name = "Masa 2",
                            Status = "Dolu",
                            TableNumber = 2
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = false,
                            IsReserved = true,
                            Name = "Masa 3",
                            Status = "Rezerve",
                            TableNumber = 3
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            CreatedAt = new DateTime(2025, 1, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            IsFull = false,
                            IsReserved = false,
                            Name = "Masa 4",
                            Status = "Boş",
                            TableNumber = 4
                        });
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            IsActive = true,
                            Name = "admin",
                            Password = "1234",
                            UserRoleId = 1
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            IsActive = true,
                            Name = "garson",
                            Password = "1234",
                            UserRoleId = 2
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            IsActive = true,
                            Name = "kasiyer",
                            Password = "1234",
                            UserRoleId = 3
                        });
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Yönetici"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Garson"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kasiyer"
                        });
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Order", b =>
                {
                    b.HasOne("Restolog.Entities.Concrete.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restolog.Entities.Concrete.TableEntity", "Table")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restolog.Entities.Concrete.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("Table");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.OrderDetail", b =>
                {
                    b.HasOne("Restolog.Entities.Concrete.Order", null)
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restolog.Entities.Concrete.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Payment", b =>
                {
                    b.HasOne("Restolog.Entities.Concrete.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.PaymentDetail", b =>
                {
                    b.HasOne("Restolog.Entities.Concrete.OrderDetail", "OrderDetail")
                        .WithMany()
                        .HasForeignKey("OrderDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Restolog.Entities.Concrete.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderDetail");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Product", b =>
                {
                    b.HasOne("Restolog.Entities.Concrete.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.User", b =>
                {
                    b.HasOne("Restolog.Entities.Concrete.UserRole", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Restolog.Entities.Concrete.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
